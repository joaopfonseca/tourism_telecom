{"version":3,"sources":["../../src/core/model.js"],"names":["GL","Buffer","Program","withParameters","checkUniformValues","isWebGL","getUniformsTable","getDrawMode","Object3D","log","formatValue","MONOLITHIC_SHADERS","MODULAR_SHADERS","assembleShaders","addModel","removeModel","logModel","getOverrides","Query","assert","MSG_INSTANCED_PARAM_DEPRECATED","ERR_MODEL_PARAMS","Model","gl","opts","deprecated","Object","assign","program","init","vs","fs","modules","defines","moduleSettings","defaultUniforms","isInstanced","instanced","vertexCount","undefined","instanceCount","drawMode","uniforms","attributes","geometry","pickable","pick","render","onBeforeRender","onAfterRender","timerQueryEnabled","_initializeProgram","setUniforms","getModuleUniforms","console","warn","buffers","userData","drawParams","dynamic","needsRedraw","setGeometry","setAttributes","Boolean","Number","isFinite","isSupported","timer","timeElapsedQuery","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","assembleResult","getUniforms","delete","id","redraw","clearRedrawFlags","getNeedsRedraw","getVertexCount","_createBuffersFromAttributeDescriptors","getAttributes","setNeedsRedraw","camera","viewMatrix","modelMatrix","cameraUniforms","viewUniforms","getCoordinateUniforms","samplers","parameters","settings","framebuffer","resolvedUniforms","addViewUniforms","setProgramState","_logAttributesAndUniforms","isIndexed","indexType","_timerQueryStart","draw","_timerQueryEnd","unsetProgramState","use","setBuffers","unsetBuffers","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getResult","lastFrameTime","attributeName","attribute","target","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","buffer","setData","data","value","setDataLayout","priority","attributeTable","_getAttributesTable","header","table","unusedTable","unusedCount","attributeLocations","_attributeLocations","location","_getAttributeEntry","round","Math","num","type","size","verts","bytes","layout","length","BYTES_PER_ELEMENT","constructor","name","String","replace","isInteger","indexOf","Location","Value"],"mappings":"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","file":"model.js","sourcesContent":["// A scenegraph object node\nimport {GL, Buffer, Program, withParameters, checkUniformValues, isWebGL} from '../webgl';\n// import {withParameters} from '../webgl/context-state';\nimport {getUniformsTable} from '../webgl/uniforms';\nimport {getDrawMode} from '../geometry/geometry';\n\nimport Object3D from '../core/object-3d';\nimport {log, formatValue} from '../utils';\nimport {MONOLITHIC_SHADERS, MODULAR_SHADERS} from '../shadertools/shaders';\nimport {assembleShaders} from '../shadertools';\n\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport Query from '../webgl/query';\nimport assert from 'assert';\n\nconst MSG_INSTANCED_PARAM_DEPRECATED = `\\\nWarning: Model constructor: parameter \"instanced\" renamed to \"isInstanced\".\nThis will become a hard error in a future version of luma.gl.`;\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\n// Model abstract O3D Class\nexport default class Model extends Object3D {\n  constructor(gl, opts = {}) {\n    super(opts);\n    if (isWebGL(gl)) {\n      // constructor signature 1: (gl, {...opts})\n      this.gl = gl;\n    } else {\n      // Warning that we are using v3 style construction\n      log.deprecated('Model({gl, ...opts})', 'Model(gl, {...opts}');\n      // constructor signature 2: ({gl, ...opts})\n      // Note: A Model subclass may still have supplied opts, just use those as overrides\n      opts = Object.assign(gl, opts);\n      // v3 compatibility: Auto extract gl from program if supplied\n      this.gl = opts.gl || (opts.program && opts.program.gl);\n      // Verify that we have a valid context\n      assert(isWebGL(this.gl), 'Not a WebGL context');\n    }\n    this.init(opts);\n  }\n\n  /* eslint-disable max-statements  */\n  /* eslint-disable complexity  */\n  init({\n    vs = null,\n    fs = null,\n\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    moduleSettings = {},\n\n    // 2: Legacy shaders\n    defaultUniforms,\n\n    // 3: Pre-created program\n    program,\n\n    isInstanced = false, // Enables instanced rendering\n    instanced, // deprecated\n    vertexCount = undefined,\n    instanceCount = 0,\n\n    // Extra uniforms and attributes (beyond geometry, material, camera)\n    drawMode,\n    uniforms = {},\n    attributes = {},\n    geometry = null,\n\n    // Picking\n    pickable = true,\n    pick = null,\n    render = null,\n    onBeforeRender = () => {},\n    onAfterRender = () => {},\n\n    // Other opts\n    timerQueryEnabled = false\n  } = {}) {\n    this._initializeProgram({\n      vs,\n      fs,\n      modules,\n      defines,\n      moduleSettings,\n      defaultUniforms,\n      program\n    });\n\n    this.uniforms = {};\n\n    // Make sure we have some reasonable default uniforms in place\n    uniforms = Object.assign({}, this.program.defaultUniforms, uniforms);\n    this.setUniforms(uniforms);\n    // Get all default uniforms\n    this.setUniforms(this.getModuleUniforms());\n    // Get unforms for supplied parameters\n    this.setUniforms(this.getModuleUniforms(moduleSettings));\n\n    if (instanced) {\n      /* global console */\n      /* eslint-disable no-console */\n      console.warn(MSG_INSTANCED_PARAM_DEPRECATED);\n      isInstanced = isInstanced || instanced;\n    }\n\n    // TODO - remove?\n    this.buffers = {};\n    this.userData = {};\n    this.drawParams = {};\n    this.dynamic = false;\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    this.setGeometry(geometry);\n\n    this.attributes = {};\n    this.setAttributes(attributes);\n\n    // geometry might have set drawMode and vertexCount\n    if (drawMode !== undefined) {\n      this.drawMode = getDrawMode(drawMode);\n    }\n    if (vertexCount !== undefined) {\n      this.vertexCount = vertexCount;\n    }\n    this.isInstanced = isInstanced;\n    this.instanceCount = instanceCount;\n\n    // picking options\n    this.pickable = Boolean(pickable);\n    this.pick = pick || (() => false);\n\n    this.onBeforeRender = onBeforeRender;\n    this.onAfterRender = onAfterRender;\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n\n    this.timerQueryEnabled = timerQueryEnabled && Query.isSupported(this.gl, {timer: true});\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n  }\n  /* eslint-enable max-statements */\n\n  _initializeProgram({\n    vs,\n    fs,\n    modules,\n    defines,\n    moduleSettings,\n    defaultUniforms,\n    program\n  }) {\n    // Assign default shaders if none are provided\n    if (!vs) {\n      vs = MODULAR_SHADERS.vs;\n    }\n    if (!fs) {\n      fs = MODULAR_SHADERS.fs;\n    }\n\n    // Assign default uniforms (if any default shaders are being used)\n    if (vs === MONOLITHIC_SHADERS.vs || fs === MONOLITHIC_SHADERS.fs) {\n      defaultUniforms = defaultUniforms || MONOLITHIC_SHADERS.defaultUniforms;\n    }\n\n    const assembleResult = assembleShaders(this.gl, {vs, fs, modules, defines});\n    ({vs, fs} = assembleResult);\n    const {getUniforms} = assembleResult;\n\n    this.getModuleUniforms = getUniforms || (x => {});\n\n    this.program = program || new Program(this.gl, {vs, fs});\n    assert(this.program instanceof Program, 'Model needs a program');\n  }\n  /* eslint-enable complexity */\n\n  destroy() {\n    this.delete();\n  }\n\n  delete() {\n    this.program.delete();\n    removeModel(this.id);\n  }\n\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = redraw;\n    return this;\n  }\n\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    let redraw = false;\n    redraw = redraw || this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    redraw = redraw || this.geometry.getNeedsRedraw({clearRedrawFlags});\n    return redraw;\n  }\n\n  setDrawMode(drawMode) {\n    this.drawMode = getDrawMode(drawMode);\n    return this;\n  }\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  // TODO - just set attributes, don't hold on to geometry\n  setGeometry(geometry) {\n    this.geometry = geometry;\n    this.vertexCount = geometry.getVertexCount();\n    this.drawMode = geometry.drawMode;\n    this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  setAttributes(attributes = {}) {\n    Object.assign(this.attributes, attributes);\n    this._createBuffersFromAttributeDescriptors(attributes);\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    checkUniformValues(uniforms, this.id);\n    Object.assign(this.uniforms, uniforms);\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  // getModuleUniforms (already on object)\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts);\n    return this.setUniforms(uniforms);\n  }\n\n  // TODO - uniform names are too strongly linked camera <=> default shaders\n  // At least all special handling is collected here.\n  addViewUniforms(uniforms) {\n    // TODO - special treatment of these parameters should be removed\n    const {camera, viewMatrix, modelMatrix} = uniforms;\n    // Camera exposes uniforms that can be used directly in shaders\n    const cameraUniforms = camera ? camera.getUniforms() : {};\n\n    const viewUniforms = viewMatrix ?\n      this.getCoordinateUniforms(viewMatrix, modelMatrix) : {};\n\n    return Object.assign({}, uniforms, cameraUniforms, viewUniforms);\n  }\n\n  draw({\n    uniforms = {},\n    attributes = {},\n    samplers = {},\n    parameters = {},\n    settings,\n    framebuffer = null\n  } = {}) {\n    if (settings) {\n      log.deprecated('settings', 'parameters');\n      parameters = settings;\n    }\n    const {program: {gl}} = this;\n    if (framebuffer) {\n      parameters = Object.assign(parameters, {framebuffer});\n    }\n    return withParameters(gl, parameters,\n      () => this.render(uniforms, attributes, samplers)\n    );\n  }\n\n  render(uniforms = {}, attributes = {}, parameters = {}, samplers = {}) {\n    addModel(this);\n\n    const resolvedUniforms = this.addViewUniforms(uniforms);\n    getOverrides(this.id, resolvedUniforms);\n\n    this.setUniforms(resolvedUniforms);\n\n    log.log(2, `>>> RENDERING MODEL ${this.id}`, this);\n\n    this.setProgramState();\n\n    this._logAttributesAndUniforms(3, resolvedUniforms);\n\n    this.onBeforeRender();\n\n    const drawParams = this.drawParams;\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn(0, 'Found instanced attributes on non-instanced model');\n    }\n    const {isIndexed, indexType} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    this._timerQueryStart();\n\n    this.program.draw({\n      drawMode: this.getDrawMode(),\n      vertexCount: this.getVertexCount(),\n      isIndexed,\n      indexType,\n      isInstanced,\n      instanceCount\n    });\n\n    this._timerQueryEnd();\n\n    this.onAfterRender();\n\n    this.unsetProgramState();\n\n    this.setNeedsRedraw(false);\n\n    log.log(2, `<<< RENDERING MODEL ${this.id} - complete`);\n\n    return this;\n  }\n\n  setProgramState() {\n    const {program} = this;\n    program.use();\n    this.drawParams = {};\n    program.setBuffers(this.buffers, {drawParams: this.drawParams});\n    program.setUniforms(this.uniforms, this.samplers);\n    return this;\n  }\n\n  unsetProgramState() {\n    // Ensures all vertex attributes are disabled and ELEMENT_ARRAY_BUFFER\n    // is unbound\n    this.program.unsetBuffers();\n    return this;\n  }\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getResult();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(2, 'program.id: ', this.program.id);\n        log.log(2, `last frame time: ${this.stats.lastFrameTime}ms`);\n        log.log(2, `average frame time ${this.stats.averageFrameTime}ms`);\n        log.log(2, `accumulated frame time: ${this.stats.accumulatedFrameTime}ms`);\n        log.log(2, `profile frame count: ${this.stats.profileFrameCount}`);\n\n      }\n    }\n  }\n\n  // Makes sure buffers are created for all attributes\n  // and that the program is updated with those buffers\n  // TODO - do we need the separation between \"attributes\" and \"buffers\"\n  // couldn't apps just create buffers directly?\n  _createBuffersFromAttributeDescriptors(attributes) {\n    const {program: {gl}} = this;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      if (attribute instanceof Buffer) {\n        this.buffers[attributeName] = attribute;\n      } else {\n        // Autocreate a buffer\n        this.buffers[attributeName] =\n          this.buffers[attributeName] || new Buffer(gl, {\n            target: attribute.isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER\n          });\n\n        const buffer = this.buffers[attributeName];\n        buffer\n          .setData({data: attribute.value})\n          .setDataLayout(attribute);\n      }\n    }\n\n    return this;\n  }\n\n  _logAttributesAndUniforms(priority = 3, uniforms = {}) {\n    if (log.priority >= priority) {\n      const attributeTable = this._getAttributesTable({\n        header: `Attributes ${this.id}`,\n        program: this.program,\n        attributes: Object.assign({}, this.geometry.attributes, this.attributes)\n      });\n      log.table(priority, attributeTable);\n\n      const {table, unusedTable, unusedCount} = getUniformsTable({\n        header: `Uniforms ${this.id}`,\n        program: this.program,\n        uniforms: Object.assign({}, this.uniforms, uniforms)\n      });\n\n      log.table(priority, table);\n      log.log(priority, `${unusedCount || 'No'} unused uniforms `, unusedTable);\n    }\n\n    logModel(this, uniforms);\n  }\n\n  // Todo move to attributes manager\n  _getAttributesTable({\n    attributes,\n    header = 'Attributes',\n    instanced,\n    program\n  } = {}) {\n    assert(program);\n    const attributeLocations = program._attributeLocations;\n    const table = {[header]: {}};\n\n    // Add used attributes\n    for (const attributeName in attributeLocations) {\n      const attribute = attributes[attributeName];\n      const location = attributeLocations[attributeName];\n      table[attributeName] = this._getAttributeEntry(attribute, location);\n    }\n\n    // Add any unused attributes\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (!table[attributeName]) {\n        table[attributeName] = this._getAttributeEntry(attribute, null);\n      }\n    }\n\n    return table;\n  }\n\n  _getAttributeEntry(attribute, location) {\n    const round = num => Math.round(num * 10) / 10;\n\n    let type = 'NOT PROVIDED';\n    let instanced = 0;\n    let size = 'N/A';\n    let verts = 'N/A';\n    let bytes = 'N/A';\n    let value = 'N/A';\n\n    if (attribute && location === null) {\n      location = attribute.isIndexed ? 'ELEMENT_ARRAY_BUFFER' : 'NOT USED';\n    }\n\n    if (attribute instanceof Buffer) {\n      const buffer = attribute;\n      type = buffer.layout.type;\n      instanced = buffer.layout.instanced;\n      size = buffer.layout.size;\n      verts = round(buffer.data.length / buffer.layout.size);\n      bytes = buffer.data.length * buffer.data.BYTES_PER_ELEMENT;\n    } else if (attribute) {\n      type = attribute.value.constructor.name;\n      instanced = attribute.instanced;\n      size = attribute.size;\n      verts = round(attribute.value.length / attribute.size);\n      bytes = attribute.value.length * attribute.value.BYTES_PER_ELEMENT;\n      value = attribute.value;\n    }\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    const isInteger = type.indexOf('nt') !== -1;\n\n    return {\n      Location: `${location}${instanced ? ' [instanced]' : ''}`,\n      'Type Size x Verts = Bytes': `${type} ${size} x ${verts} = ${bytes}`,\n      Value: formatValue(value, {size, isInteger})\n    };\n  }\n\n  // DEPRECATED / REMOVED\n  isPickable() {\n    return this.pickable;\n  }\n\n  setPickable(pickable = true) {\n    this.pickable = Boolean(pickable);\n    return this;\n  }\n\n  getGeometry() {\n    return this.geometry;\n  }\n}\n"]}