{"version":3,"sources":["../../src/io/browser-load.js"],"names":["setPathPrefix","loadFile","loadImage","pathPrefix","prefix","url","opts","crossOrigin","Promise","resolve","reject","image","Image","onload","onerror","Error","src","error"],"mappings":";;;;;QAOgBA,a,GAAAA,a;QAIAC,Q,GAAAA,Q;QAiBAC,S,GAAAA,S;;AA5BhB;;AAEA,IAAIC,aAAa,EAAjB;;AAEA;;;AAGO,SAASH,aAAT,CAAuBI,MAAvB,EAA+B;AACpCD,eAAaC,MAAb;AACD;;AAEM,SAASH,QAAT,CAAkBI,GAAlB,EAAuBC,IAAvB,EAA6B;AAClC,MAAI,OAAOD,GAAP,KAAe,QAAf,IAA2B,CAACC,IAAhC,EAAsC;AACpC;AACAA,WAAOD,GAAP;AACAA,UAAMC,KAAKD,GAAX;AACD;AACDC,OAAKD,GAAL,GAAWF,aAAaA,aAAaE,GAA1B,GAAgCA,GAA3C;AACA,SAAO,qCAAYC,IAAZ,CAAP;AACD;;AAED;;AAEA;;;;;AAKO,SAASJ,SAAT,CAAmBG,GAAnB,EAEJ;AAAA,MAF4BC,IAE5B,uEAFmC;AACpCC,iBAAa;AADuB,GAEnC;;AACDF,QAAMF,aAAaA,aAAaE,GAA1B,GAAgCA,GAAtC;;AAEA,SAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI;AACF,UAAMC,QAAQ,IAAIC,KAAJ,EAAd;AACAD,YAAME,MAAN,GAAe;AAAA,eAAMJ,QAAQE,KAAR,CAAN;AAAA,OAAf;AACAA,YAAMG,OAAN,GAAgB;AAAA,eAAMJ,OAAO,IAAIK,KAAJ,2BAAkCV,GAAlC,OAAP,CAAN;AAAA,OAAhB;AACAM,YAAMJ,WAAN,GAAoBD,KAAKC,WAAzB;AACAI,YAAMK,GAAN,GAAYX,GAAZ;AACD,KAND,CAME,OAAOY,KAAP,EAAc;AACdP,aAAOO,KAAP;AACD;AACF,GAVM,CAAP;AAWD","file":"browser-load.js","sourcesContent":["import {requestFile} from './browser-request-file';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\nexport function loadFile(url, opts) {\n  if (typeof url !== 'string' && !opts) {\n    // TODO - warn for deprecated mode\n    opts = url;\n    url = opts.url;\n  }\n  opts.url = pathPrefix ? pathPrefix + url : url;\n  return requestFile(opts);\n}\n\n/* global Image */\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts = {\n  crossOrigin: 'anonymous'\n}) {\n  url = pathPrefix ? pathPrefix + url : url;\n\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = opts.crossOrigin;\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"]}