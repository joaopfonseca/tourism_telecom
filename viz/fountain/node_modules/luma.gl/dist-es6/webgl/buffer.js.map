{"version":3,"sources":["../../src/webgl/buffer.js"],"names":["GL","assertWebGL2Context","getGLTypeFromTypedArray","Resource","assert","ERR_BUFFER_PARAMS","GL_COPY_READ_BUFFER","GL_COPY_WRITE_BUFFER","GL_TRANSFORM_FEEDBACK_BUFFER","BufferLayout","type","size","offset","stride","normalized","integer","instanced","Buffer","gl","opts","target","webgl2","ARRAY_BUFFER","index","setData","Object","seal","layout","data","bytes","usage","STATIC_DRAW","arguments","FLOAT","byteLength","bytesUsed","setDataLayout","assign","bindBuffer","handle","bufferData","options","initialize","srcOffset","length","undefined","bufferSubData","sourceBuffer","readOffset","writeOffset","copyBufferSubData","dstData","srcByteOffset","dstOffset","ArrayBuffer","getBufferSubData","UNIFORM_BUFFER","bindBufferBase","bindBufferRange","Error","isIndexedBuffer","binding","getIndexedParameter","createBuffer","deleteBuffer","pname","value","getBufferParameter"],"mappings":"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","file":"buffer.js","sourcesContent":["import GL from './api';\nimport {assertWebGL2Context} from './context';\nimport {getGLTypeFromTypedArray} from '../utils/typed-array-utils';\nimport Resource from './resource';\nimport assert from 'assert';\n\nconst ERR_BUFFER_PARAMS = 'Illegal or missing parameter to Buffer';\n\nconst GL_COPY_READ_BUFFER = 0x8F36;\nconst GL_COPY_WRITE_BUFFER = 0x8F37;\nconst GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;\n\nexport class BufferLayout {\n  /**\n   * @classdesc\n   * Store characteristics of a data layout\n   * This data can be used when updating vertex attributes with\n   * the associated buffer, freeing the application from keeping\n   * track of this metadata.\n   *\n   * @class\n   * @param {GLuint} size - number of values per element (1-4)\n   * @param {GLuint} type - type of values (e.g. gl.FLOAT)\n   * @param {GLbool} normalized=false - normalize integers to [-1,1] or [0,1]\n   * @param {GLuint} integer=false - WebGL2 only, int-to-float conversion\n   * @param {GLuint} stride=0 - supports strided arrays\n   * @param {GLuint} offset=0 - supports strided arrays\n   */\n  constructor({\n    type,\n    size = 1,\n    offset = 0,\n    stride = 0,\n    normalized = false,\n    integer = false,\n    instanced = 0\n  } = {}) {\n    this.type = type;\n    this.size = size;\n    this.offset = offset;\n    this.stride = stride;\n    this.normalized = normalized;\n    this.integer = integer;\n    this.instanced = instanced;\n  }\n}\n\nexport default class Buffer extends Resource {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n    // In WebGL1, we need to make sure we use GL.ELEMENT_ARRAY_BUFFER when\n    // initializing element buffers, otherwise the buffer type will be locked\n    // to a generic (non-element) buffer.\n    // In WebGL2, we can use GL_COPY_READ_BUFFER which avoids locking the type here\n    this.target = opts.target || (this.gl.webgl2 ? GL_COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n    this.index = null;\n    this.setData(opts);\n    Object.seal(this);\n  }\n\n  // Stores the layout of data with the buffer, makes it easy to e.g. set it as an attribute later\n  setDataLayout({\n    layout,\n    type,\n    size = 1,\n    offset = 0,\n    stride = 0,\n    normalized = false,\n    integer = false,\n    instanced = 0\n  }) {\n    this.layout = layout || new BufferLayout({\n      type: type || this.type, // Use autodeduced type if available\n      size,\n      offset,\n      stride,\n      normalized,\n      integer,\n      instanced\n    });\n    return this;\n  }\n\n  // Creates and initializes the buffer object's data store.\n  initialize({\n    data,\n    bytes,\n    usage = GL.STATIC_DRAW,\n    // Layout of stored data\n    layout,\n    type,\n    size = 1,\n    offset = 0,\n    stride = 0,\n    normalized = false,\n    integer = false,\n    instanced = 0\n  } = {}) {\n    const opts = arguments[0];\n\n    if (!data) {\n      type = type || GL.FLOAT;\n      bytes = bytes || 0;\n    } else {\n      type = type || getGLTypeFromTypedArray(data);\n      bytes = data.byteLength;\n      assert(type, ERR_BUFFER_PARAMS);\n    }\n\n    this.bytes = bytes;\n    this.bytesUsed = bytes;\n    this.data = data;\n    this.type = type;\n    this.usage = usage;\n\n    // Call after type is set\n    this.setDataLayout(Object.assign(opts));\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL_COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL_COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data || bytes, usage);\n    this.gl.bindBuffer(target, null);\n\n    return this;\n  }\n\n  // DEPRECATED - Can we change to call `subData`?\n  setData(options) {\n    return this.initialize(options);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  subData({\n    data,          // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n    offset = 0,    // Offset into buffer\n    srcOffset = 0, // WebGL2 only: Offset into srcData\n    length         // WebGL2 only: Number of bytes to be copied\n  } = {}) {\n    assert(data, ERR_BUFFER_PARAMS);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL_COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL_COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || length !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, length || 0);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({\n    sourceBuffer,\n    readOffset = 0,\n    writeOffset = 0,\n    size\n  }) {\n    assertWebGL2Context(this.gl);\n\n    // Use GL_COPY_READ_BUFFER+GL_COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL_COPY_READ_BUFFER, sourceBuffer.handle);\n    this.gl.bindBuffer(GL_COPY_WRITE_BUFFER, this.handle);\n\n    this.gl.copyBufferSubData(\n      GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER,\n      readOffset, writeOffset, size);\n\n    this.gl.bindBuffer(GL_COPY_READ_BUFFER, null);\n    this.gl.bindBuffer(GL_COPY_WRITE_BUFFER, null);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBuffer or SharedArrayBuffer.\n  getData({\n    dstData,\n    srcByteOffset = 0,\n    dstOffset = 0,\n    length = 0\n  }) {\n    // TODO optimize dstData according to offset and length\n    dstData = dstData || new ArrayBuffer(this.bytes);\n    this.gl.bindBuffer(GL_COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(this.target, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL_COPY_READ_BUFFER, null);\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *\n   * @param {Glenum} target - target for the bind operation.\n   *\n   * @param {GLuint} index= - the index of the target.\n   *   - GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   * @param {GLuint} offset=0 - the index of the target.\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   * @param {GLuint} size= - the index of the target.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   * @returns {Buffer} - Returns itself for chaining.\n   */\n  bind({target = this.target, index = this.index, offset = 0, size} = {}) {\n    // NOTE: While GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    const type = (target === GL.UNIFORM_BUFFER || target === GL_TRANSFORM_FEEDBACK_BUFFER) ?\n      (size !== undefined ? 'ranged' : ' indexed') : 'non-indexed';\n\n    switch (type) {\n    case 'non-indexed':\n      this.gl.bindBuffer(target, this.handle);\n      break;\n    case 'indexed':\n      assertWebGL2Context(this.gl);\n      assert(offset === 0, ERR_BUFFER_PARAMS); // Make sure offset wasn't supplied\n      this.gl.bindBufferBase(target, index, this.handle);\n      break;\n    case 'ranged':\n      assertWebGL2Context(this.gl);\n      this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      break;\n    default:\n      throw new Error(ERR_BUFFER_PARAMS);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL_TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // TODO - is this the right place?\n  // gl.TRANSFORM_FEEDBACK_BUFFER_BINDING: Returns a WebGLBuffer.\n  // gl.TRANSFORM_FEEDBACK_BUFFER_SIZE: Returns a GLsizeiptr.\n  // gl.TRANSFORM_FEEDBACK_BUFFER_START: Returns a GLintptr.\n  // gl.UNIFORM_BUFFER_BINDING: Returns a WebGLBuffer.\n  // gl.UNIFORM_BUFFER_SIZE: Returns a GLsizeiptr.\n  // gl.UNIFORM_BUFFER_START: Returns a GLintptr.\n  getIndexedParameter(binding, index) {\n    // Create the buffer - if binding it here for the first time, this locks the type\n    // In WebGL2, use GL_COPY_READ_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL_COPY_READ_BUFFER : this.target;\n    this.gl.bindBuffer(target, index);\n    return this.gl.getIndexedParameter(binding, index);\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n}\n"]}