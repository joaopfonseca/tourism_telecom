{"version":3,"sources":["../../src/webgl/context-state.js"],"names":["GL","pushContextState","popContextState","log","LUMA_SETTERS","blend","gl","value","enable","BLEND","disable","blendColor","blendEquation","args","isArray","blendEquationSeparate","blendFunc","length","blendFuncSeparate","clearColor","clearDepth","clearStencil","colorMask","cull","CULL_FACE","cullFace","depthTest","DEPTH_TEST","depthFunc","depthMask","depthRange","dither","DITHER","derivativeHint","hint","FRAGMENT_SHADER_DERIVATIVE_HINT","frontFace","mipmapHint","GENERATE_MIPMAP_HINT","lineWidth","polygonOffsetFill","POLYGON_OFFSET_FILL","polygonOffset","sampleCoverage","scissorTest","SCISSOR_TEST","scissor","stencilTest","STENCIL_TEST","stencilMask","mask","backMask","stencilMaskSeparate","FRONT","BACK","stencilFunc","func","ref","backFunc","backRef","stencilFuncSeparate","stencilOp","sfail","dpfail","dppass","backSfail","backDpfail","backDppass","stencilOpSeparate","viewport","array","Array","ArrayBuffer","isView","getParameter","getParameters","resetParameters","setParameters","glSetParameters","parameters","key","setter","withParameters","frameBuffer","nocatch","framebuffer","deprecated","resetStateAfterCall","unbind","bind","withState","glContextWithState"],"mappings":"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","file":"context-state.js","sourcesContent":["/* eslint-disable no-inline-comments, max-len */\nimport GL from '../webgl-utils/constants';\nimport {pushContextState, popContextState} from '../webgl-utils/track-context-state';\nimport {log} from '../utils';\n\n// map of parameter setter function names, parameter constants, default values and types\n// - Uses gl function names, except when setter function exist that are named differently\n// - When the WebGL api offers <setter> and <setter>Separate (e.g. blendEquation and\n//   blendEquationSeparate, we use non-separate name, but accept both non-separate and\n//   separate arguments. Thus, a `getParameter` call will always return all the separate values\n//   in an array, in a form that can be accepted by the setter.\nexport const LUMA_SETTERS = {\n  blend: (gl, value) => value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND),\n  blendColor: (gl, value) => gl.blendColor(...value),\n  blendEquation: (gl, args) => {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate(...args);\n  },\n  blendFunc: (gl, args) => {\n    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;\n    gl.blendFuncSeparate(...args);\n  },\n\n  clearColor: (gl, value) => gl.clearColor(...value),\n  clearDepth: (gl, value) => gl.clearDepth(value),\n  clearStencil: (gl, value) => gl.clearStencil(value),\n\n  colorMask: (gl, value) => gl.colorMask(...value),\n\n  cull: (gl, value) => value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE),\n  cullFace: (gl, value) => gl.cullFace(value),\n\n  depthTest: (gl, value) => value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST),\n  depthFunc: (gl, value) => gl.depthFunc(value),\n  depthMask: (gl, value) => gl.depthMask(value),\n  depthRange: (gl, value) => gl.depthRange(...value),\n\n  dither: (gl, value) => value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER),\n\n  derivativeHint: (gl, value) => {\n    // gl1: 'OES_standard_derivatives'\n    gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value);\n  },\n\n  frontFace: (gl, value) => gl.frontFace(value),\n\n  mipmapHint: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value),\n\n  lineWidth: (gl, value) => gl.lineWidth(value),\n\n  polygonOffsetFill: (gl, value) =>\n    value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL),\n  polygonOffset: (gl, value) => gl.polygonOffset(...value),\n\n  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),\n\n  scissorTest: (gl, value) => value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST),\n  scissor: (gl, value) => gl.scissor(...value),\n\n  stencilTest: (gl, value) => value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST),\n  stencilMask: (gl, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, backMask);\n  },\n  stencilFunc: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n    gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n  },\n\n  viewport: (gl, value) => gl.viewport(...value)\n};\n\n// HELPERS\n\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\n// GETTERS AND SETTERS\n\n// Get the parameter value(s) from the context\nexport {getParameter} from '../webgl-utils/set-parameters';\n\n// Get the parameters from the context\nexport {getParameters} from '../webgl-utils/set-parameters';\n\n// Resets gl state to default values.\nexport {resetParameters} from '../webgl-utils/set-parameters';\n\n// Get the parameter value(s) from the context\nimport {setParameters as glSetParameters} from '../webgl-utils/set-parameters';\n\n// Set the parameter value(s) by key to the context\n// Sets value with key to context.\n// Value may be \"normalized\" (in case a short form is supported). In that case\n// the normalized value is retured.\nexport function setParameters(gl, parameters) {\n  glSetParameters(gl, parameters);\n  for (const key in parameters) {\n    const setter = LUMA_SETTERS[key];\n    if (setter) {\n      setter(gl, parameters[key], key);\n    }\n  }\n}\n\n// VERY LIMITED / BASIC GL STATE MANAGEMENT\n// Executes a function with gl states temporarily set, exception safe\n// Currently support pixelStorage, scissor test and framebuffer binding\nexport function withParameters(gl, parameters, func) {\n  // assertWebGLContext(gl);\n\n  const {frameBuffer, nocatch = true} = parameters;\n  let {framebuffer} = parameters;\n  if (frameBuffer) {\n    log.deprecated('withParameters({frameBuffer})', 'withParameters({framebuffer})');\n    framebuffer = frameBuffer;\n  }\n\n  // Define a helper function that will reset state after the function call\n  function resetStateAfterCall() {\n    popContextState(gl);\n    if (framebuffer) {\n      // TODO - was there any previously set frame buffer?\n      framebuffer.unbind();\n    }\n  }\n\n  pushContextState(gl);\n\n  setParameters(gl, parameters);\n\n  if (framebuffer) {\n    // TODO - was there any previously set frame buffer we need to remember?\n    framebuffer.bind();\n  }\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize debugging impact for safe execution paths\n    value = func(gl);\n    resetStateAfterCall();\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      resetStateAfterCall();\n    }\n  }\n  return value;\n}\n\n// DEPRECATED\n\nexport function withState(...args) {\n  log.deprecated('withState', 'withParameters');\n  return withParameters(...args);\n}\n\nexport function glContextWithState(...args) {\n  log.deprecated('glContextWithState', 'withParameters');\n  return withParameters(...args);\n}\n"]}