{"version":3,"sources":["../../src/webgl/transform-feedback.js"],"names":["GL","Resource","isWebGL2","assertWebGL2Context","assert","GL_TRANSFORM_FEEDBACK_BUFFER","GL_TRANSFORM_FEEDBACK","TranformFeedback","gl","getExtension","handle","isTransformFeedback","opts","buffers","Object","seal","initialize","bindBuffers","clear","varyingMap","_unbindBuffers","bufferIndex","bufferName","buffer","index","Number","isFinite","primitiveMode","_bindBuffers","bindTransformFeedback","beginTransformFeedback","pauseTransformFeedback","resumeTransformFeedback","endTransformFeedback","offset","size","undefined","bindBufferBase","bindBufferRange","bindBuffer","unbindBuffer","createTransformFeedback","deleteTransformFeedback","getPrimitiveCount","drawMode","vertexCount","countVertices","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","getVertexCount","primitiveCount","getTransformFeedbackMode"],"mappings":"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","file":"transform-feedback.js","sourcesContent":["import GL from './gl-constants';\nimport Resource from './resource';\nimport {isWebGL2, assertWebGL2Context} from './context';\nimport assert from 'assert';\n\nconst GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;\nconst GL_TRANSFORM_FEEDBACK = 0x8E22;\n\nexport default class TranformFeedback extends Resource {\n\n  static isSupported(gl) {\n    return isWebGL2(gl) || gl.getExtension('OES_vertex_array_object');\n  }\n\n  static isHandle(handle) {\n    return this.gl.isTransformFeedback(this.handle);\n  }\n\n  /**\n   * @class\n   * @param {WebGL2RenderingContext} gl - context\n   * @param {Object} opts - options\n   */\n  constructor(gl, opts) {\n    assertWebGL2Context(gl);\n    super(gl, opts);\n    this.buffers = {};\n    Object.seal(this);\n\n    this.initialize(opts);\n  }\n\n  initialize({buffers = {}}) {\n    this.bindBuffers(buffers, {clear: true});\n  }\n\n  bindBuffers(buffers = {}, {clear, varyingMap = {}}) {\n    if (clear) {\n      this._unbindBuffers();\n      this.buffers = {};\n    }\n    let bufferIndex = 0;\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n      const index = bufferIndex++;\n      assert(Number.isFinite(index));\n      this.buffers[index] = buffer;\n    }\n  }\n\n  // TODO: Activation is tightly coupled to the current program. Since we try to encapsulate\n  // program.use, should we move these methods (begin/pause/resume/end) to the Program?\n  begin(primitiveMode) {\n    this._bindBuffers();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.beginTransformFeedback(primitiveMode);\n    return this;\n  }\n\n  pause() {\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.pauseTransformFeedback();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n    this._unbindBuffers();\n    return this;\n  }\n\n  resume() {\n    this._bindBuffers();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.resumeTransformFeedback();\n    return this;\n  }\n\n  end() {\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.endTransformFeedback();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n    this._unbindBuffers();\n    return this;\n  }\n\n  bindBuffer({index, buffer, offset = 0, size}) {\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    if (size === undefined) {\n      this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle);\n    } else {\n      this.gl.bindBufferRange(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle, offset, size);\n    }\n    return this;\n  }\n\n  unbindBuffer({index}) {\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // See https://github.com/KhronosGroup/WebGL/issues/2346\n  // If it was true that having a buffer on an unused TF was a problem\n  // it would make the entire concept of transform feedback objects pointless.\n  // The whole point of them is like VertexArrayObjects.\n  // You set them up with all in outputs at init time and\n  // then in one call you can setup all the outputs just before drawing.\n  // Since the point of transform feedback is to generate data that will\n  // then be used as inputs to attributes it makes zero sense you'd\n  // have to unbind them from every unused transform feedback object\n  // before you could use them in an attribute. If that was the case\n  // there would be no reason to setup transform feedback objects ever.\n  // You'd always use the default because you'd always have to bind and\n  // unbind all the buffers.\n  _bindBuffers() {\n    for (const bufferIndex in this.buffers) {\n      this.bindBuffer({buffer: this.buffers[bufferIndex], index: Number(bufferIndex)});\n    }\n  }\n\n  _unbindBuffers() {\n    for (const bufferIndex in this.buffers) {\n      this.unbindBuffer({buffer: this.buffers[bufferIndex], index: Number(bufferIndex)});\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTransformFeedback();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTransformFeedback(this.handle);\n  }\n}\n\n// Counts the number of complete \"primitives\" given a number of vertices and a drawMode\nexport function getPrimitiveCount({drawMode, vertexCount, countVertices}) {\n  switch (drawMode) {\n  case GL.POINTS: return vertexCount;\n  case GL.LINES: return vertexCount / 2;\n  case GL.LINE_STRIP: return vertexCount - 1;\n  case GL.LINE_LOOP: return vertexCount;\n  case GL.TRIANGLES: return vertexCount / 3;\n  case GL.TRIANGLE_STRIP: return vertexCount - 2;\n  case GL.TRIANGLE_FAN: return vertexCount - 2;\n  default: assert(false); return 0;\n  }\n}\n\n// Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\nexport function getVertexCount({drawMode, vertexCount}) {\n  const primitiveCount = getPrimitiveCount({drawMode, vertexCount});\n  switch (drawMode) {\n  case GL.POINTS:\n    return primitiveCount;\n  case GL.LINES:\n  case GL.LINE_STRIP:\n  case GL.LINE_LOOP:\n    return vertexCount * 2;\n  case GL.TRIANGLES:\n  case GL.TRIANGLE_STRIP:\n  case GL.TRIANGLE_FAN:\n    return vertexCount * 3;\n  default: assert(false); return 0;\n  }\n}\n\n// Counts the number of complete primitives given a number of vertices and a drawMode\nexport function getTransformFeedbackMode({drawMode}) {\n  switch (drawMode) {\n  case GL.POINTS: return GL.POINTS;\n  case GL.LINES: return GL.LINES;\n  case GL.LINE_STRIP: return GL.LINES;\n  case GL.LINE_LOOP: return GL.LINES;\n  case GL.TRIANGLES: return GL.TRIANGLES;\n  case GL.TRIANGLE_STRIP: return GL.TRIANGLES;\n  case GL.TRIANGLE_FAN: return GL.TRIANGLES;\n  default: assert(false); return 0;\n  }\n}\n"]}